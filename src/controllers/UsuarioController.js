// controllers/UsuarioController.js
// const pool = require('../config/db'); // N√£o usado no momento - usando array em mem√≥ria

// Armazenamento tempor√°rio de usu√°rios (em produ√ß√£o seria no banco)
let usuariosCadastrados = [
  { id_unico: 1, nome: 'Participante Teste', email: 'participante@teste.com', senha: '123456', role: 'participante' },
  { id_unico: 2, nome: 'Criador Teste', email: 'criador@teste.com', senha: '123456', role: 'criador' }
];

// Criar um novo usu√°rio
exports.criarUsuario = async (req, res) => {
  console.log('üìù Recebendo requisi√ß√£o de cadastro');
  console.log('üì¶ Body:', req.body);

  const { nome, email, senha, role } = req.body;

  // Valida√ß√£o b√°sica
  if (!nome || !email || !senha) {
    console.log('‚ùå Dados obrigat√≥rios n√£o fornecidos');
    return res.status(400).json({ error: 'Nome, email e senha s√£o obrigat√≥rios' });
  }

  console.log('üìù Tentativa de cadastro para:', email);

  // Verificar se email j√° existe
  const emailExiste = usuariosCadastrados.find(u => u.email === email);
  if (emailExiste) {
    console.log('‚ùå Email j√° existe:', email);
    return res.status(400).json({ error: 'Email j√° cadastrado' });
  }

  // Criar novo usu√°rio
  const novoUsuario = {
    id_unico: Date.now(), // ID tempor√°rio
    nome,
    email,
    senha,
    role: role || 'participante'
  };

  // Adicionar ao array de usu√°rios
  usuariosCadastrados.push(novoUsuario);

  console.log('‚úÖ Usu√°rio criado e adicionado:', novoUsuario);
  console.log('üìä Total de usu√°rios:', usuariosCadastrados.length);

  res.status(201).json({
    success: true,
    usuario: {
      id_unico: novoUsuario.id_unico,
      nome: novoUsuario.nome,
      email: novoUsuario.email,
      role: novoUsuario.role
    }
  });
};

// Login do usu√°rio
exports.loginUsuario = async (req, res) => {
  console.log('üîê Recebendo requisi√ß√£o de login');
  console.log('üì¶ Body:', req.body);

  const { email, senha } = req.body;

  // Valida√ß√£o b√°sica
  if (!email || !senha) {
    console.log('‚ùå Email ou senha n√£o fornecidos');
    return res.status(400).json({ error: 'Email e senha s√£o obrigat√≥rios' });
  }

  console.log('üîê Tentativa de login para:', email);

  // Buscar usu√°rio no array de usu√°rios cadastrados
  const usuario = usuariosCadastrados.find(u => u.email === email && u.senha === senha);

  console.log('üë• Total de usu√°rios cadastrados:', usuariosCadastrados.length);
  console.log('üîç Usu√°rio encontrado:', usuario ? 'SIM' : 'N√ÉO');

  if (!usuario) {
    console.log('‚ùå Credenciais inv√°lidas');
    return res.status(401).json({ error: 'Email ou senha incorretos' });
  }

  console.log('‚úÖ Login bem-sucedido para:', usuario.email);

  // Criar sess√£o
  req.session.userId = usuario.id_unico;
  req.session.userName = usuario.nome;
  req.session.userRole = usuario.role;

  console.log('üé´ Sess√£o criada');

  res.json({
    success: true,
    usuario: {
      id: usuario.id_unico,
      nome: usuario.nome,
      email: usuario.email,
      role: usuario.role
    }
  });
};

// Obter dados do usu√°rio logado
exports.obterUsuarioLogado = async (req, res) => {
  try {
    console.log('üë§ Obtendo dados do usu√°rio logado');
    console.log('üìã Session userId:', req.session.userId);

    if (!req.session.userId) {
      console.log('‚ùå Usu√°rio n√£o autenticado');
      return res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
    }

    // Buscar usu√°rio no array de usu√°rios cadastrados
    const usuario = usuariosCadastrados.find(u => u.id_unico === req.session.userId);

    if (!usuario) {
      console.log('‚ùå Usu√°rio n√£o encontrado no array');
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
    }

    console.log('‚úÖ Usu√°rio encontrado:', usuario.email);

    res.json({
      id_unico: usuario.id_unico,
      nome: usuario.nome,
      email: usuario.email,
      role: usuario.role
    });
  } catch (err) {
    console.error('‚ùå Erro ao obter usu√°rio:', err);
    res.status(500).json({ error: err.message });
  }
};

// Listar todos os usu√°rios
exports.listarUsuarios = async (req, res) => {
  try {
    console.log('üìã Listando todos os usu√°rios');
    console.log('üë• Total de usu√°rios:', usuariosCadastrados.length);

    // Retornar usu√°rios sem a senha
    const usuariosSemSenha = usuariosCadastrados.map(u => ({
      id_unico: u.id_unico,
      nome: u.nome,
      email: u.email,
      role: u.role
    }));

    res.status(200).json(usuariosSemSenha);
  } catch (err) {
    console.error('‚ùå Erro ao listar usu√°rios:', err);
    res.status(500).json({ error: err.message });
  }
};

// Buscar usu√°rio por ID
exports.buscarUsuario = async (req, res) => {
  const { id } = req.params;

  try {
    console.log('üîç Buscando usu√°rio por ID:', id);

    const usuario = usuariosCadastrados.find(u => u.id_unico === parseInt(id));

    if (!usuario) {
      console.log('‚ùå Usu√°rio n√£o encontrado');
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    }

    console.log('‚úÖ Usu√°rio encontrado:', usuario.email);

    // Retornar usu√°rio sem a senha
    res.status(200).json({
      id_unico: usuario.id_unico,
      nome: usuario.nome,
      email: usuario.email,
      role: usuario.role
    });
  } catch (err) {
    console.error('‚ùå Erro ao buscar usu√°rio:', err);
    res.status(500).json({ error: err.message });
  }
};

// Excluir usu√°rio
exports.excluirUsuario = async (req, res) => {
  const { id } = req.params;

  try {
    console.log('üóëÔ∏è Excluindo usu√°rio por ID:', id);

    const index = usuariosCadastrados.findIndex(u => u.id_unico === parseInt(id));

    if (index === -1) {
      console.log('‚ùå Usu√°rio n√£o encontrado para exclus√£o');
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    }

    const usuarioExcluido = usuariosCadastrados.splice(index, 1)[0];
    console.log('‚úÖ Usu√°rio exclu√≠do:', usuarioExcluido.email);

    res.status(200).json({ message: 'Usu√°rio exclu√≠do com sucesso' });
  } catch (err) {
    console.error('‚ùå Erro ao excluir usu√°rio:', err);
    res.status(500).json({ error: err.message });
  }
};
